Index: app/src/main/java/com/wordpress/commonplayground/RegistrationActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.wordpress.commonplayground;\n\nimport android.animation.Animator;\nimport android.animation.AnimatorListenerAdapter;\nimport android.annotation.TargetApi;\nimport android.content.Intent;\nimport android.support.design.widget.Snackbar;\nimport android.support.v7.app.AppCompatActivity;\n\nimport android.os.Build;\nimport android.os.Bundle;\nimport android.text.TextUtils;\nimport android.util.Log;\nimport android.view.KeyEvent;\nimport android.view.View;\nimport android.view.View.OnClickListener;\nimport android.view.inputmethod.EditorInfo;\nimport android.widget.AutoCompleteTextView;\nimport android.widget.Button;\nimport android.widget.EditText;\nimport android.widget.TextView;\n\nimport com.android.volley.Request;\nimport com.android.volley.RequestQueue;\nimport com.android.volley.Response;\nimport com.android.volley.VolleyError;\nimport com.android.volley.toolbox.StringRequest;\nimport com.android.volley.toolbox.Volley;\n\nimport java.util.HashMap;\nimport java.util.Map;\nimport java.util.regex.Matcher;\nimport java.util.regex.Pattern;\n\n/**\n * A login screen that offers login via email/password.\n */\npublic class RegistrationActivity extends AppCompatActivity {\n\n    /**\n     * A dummy authentication store containing known user names and passwords.\n     * TODO: remove after connecting to a real authentication system.\n     */\n\n\n    // UI references.\n    private EditText mUsernameView, mEmailView, mPasswordView, mPasswordConfirmView;\n    private View mProgressView;\n    private View mLoginFormView;\n\n\n    @Override\n    protected void onCreate(Bundle savedInstanceState) {\n        super.onCreate(savedInstanceState);\n        setContentView(R.layout.activity_registration);\n        setupActionBar();\n        // Set up the login form.\n        mUsernameView = (EditText) findViewById(R.id.username);\n        mEmailView = (EditText) findViewById(R.id.email);\n\n        mPasswordView = (EditText) findViewById(R.id.password);\n        mPasswordView.setOnEditorActionListener(new TextView.OnEditorActionListener() {\n            @Override\n            public boolean onEditorAction(TextView textView, int id, KeyEvent keyEvent) {\n                if (id == EditorInfo.IME_ACTION_DONE || id == EditorInfo.IME_NULL) {\n                    attemptRegister(textView); /* RICHTIGE VIEW?!*/\n                    return true;\n                }\n                return false;\n            }\n        });\n\n        mPasswordConfirmView = (EditText) findViewById(R.id.password_confirm);\n\n        Button mRegistrationButton = (Button) findViewById(R.id.registration_button);\n        mRegistrationButton.setOnClickListener(new OnClickListener() {\n            @Override\n            public void onClick(View view) {\n                //Methode einfÃ¼gen, die an das Backend die Daten sendet.\n                attemptRegister(view);\n            }\n        });\n\n        mLoginFormView = findViewById(R.id.login_form);\n        mProgressView = findViewById(R.id.login_progress);\n    }\n\n\n\n    /**\n     * Set up the {@link android.app.ActionBar}, if the API is available.\n     */\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB)\n    private void setupActionBar() {\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {\n            // Show the Up button in the action bar.\n            getSupportActionBar().setDisplayHomeAsUpEnabled(true);\n        }\n    }\n\n    /**\n     * Attempts to sign in or register the account specified by the login form.\n     * If there are form errors (invalid email, missing fields, etc.), the\n     * errors are presented and no actual login attempt is made.\n     */\n    private void attemptRegister(View view) {\n\n        // Reset errors.\n        mUsernameView.setError(null);\n        mEmailView.setError(null);\n        mPasswordView.setError(null);\n        mPasswordConfirmView.setError(null);\n\n        // Store values at the time of the login attempt.\n        String username = mUsernameView.getText().toString();\n        String email = mEmailView.getText().toString();\n        String password = mPasswordView.getText().toString();\n        String passwordConfirm = mPasswordConfirmView.getText().toString();\n\n        boolean cancel = false;\n        View focusView = null;\n\n        // Check for valid input from the bottom to the top that the focus is at the top if there are several mistakes\n        //Check for a valid confirm.\n        if (TextUtils.isEmpty(passwordConfirm)) {\n            mPasswordConfirmView.setError(getString(R.string.error_field_required));\n            focusView = mPasswordConfirmView;\n            cancel = true;\n        } else if (!isPasswordConfirmed(password, passwordConfirm)) {\n            mPasswordConfirmView.setError(getString(R.string.error_invalid_password_confirm));\n            focusView = mPasswordConfirmView;\n            cancel = true;\n        }\n\n        // Check for a valid password.\n        if (TextUtils.isEmpty(password)) {\n            mPasswordView.setError(getString(R.string.error_field_required));\n            focusView = mPasswordView;\n            cancel = true;\n        } else if (password.length() < 8) {\n            mPasswordView.setError(getString(R.string.error_short_password));\n            focusView = mPasswordView;\n            cancel = true;\n        } else if (password.length() > 30) {\n            mPasswordView.setError(getString(R.string.error_long_password));\n            focusView = mPasswordView;\n            cancel = true;\n        } else if (!isPasswordValid(password)) {\n            mPasswordView.setError(getString(R.string.error_invalid_password));\n            focusView = mPasswordView;\n            cancel = true;\n        }\n\n        // Check for a valid email address.\n        if (TextUtils.isEmpty(email)) {\n            mEmailView.setError(getString(R.string.error_field_required));\n            focusView = mEmailView;\n            cancel = true;\n        } else if (!isEmailValid(email)) {\n            mEmailView.setError(getString(R.string.error_invalid_email));\n            focusView = mEmailView;\n            cancel = true;\n        }\n\n        // Check for a valid email address.\n        if (TextUtils.isEmpty(username)) {\n            mUsernameView.setError(getString(R.string.error_field_required));\n            focusView = mUsernameView;\n            cancel = true;\n        }\n\n        if (cancel) {\n            // There was an error; don't attempt login and focus the first\n            // form field with an error.\n            focusView.requestFocus();\n        } else {\n            // REQUEST HERE\n            requestRegister(view);\n        }\n    }\n\n    private void requestRegister(View view) {\n        /*get screen content*/\n        final String username = mUsernameView.getText().toString();\n        final String email = mEmailView.getText().toString();\n        final String password = mPasswordView.getText().toString();\n\n        RequestQueue MyRequestQueue = Volley.newRequestQueue(this);\n        String url = \"http://10.0.2.2:8080/registerNewUser\";\n        StringRequest MyStringRequest = new StringRequest(Request.Method.POST, url, new Response.Listener<String>() {\n            @Override\n            public void onResponse(String response) {\n                //This code is executed if the server responds, whether or not the response contains data.\n                Log.d(\"Response.Register\", response.toString());\n                Intent openLoginActivity = new Intent(RegistrationActivity.this, LoginActivity.class);\n                startActivity(openLoginActivity);\n            }\n        }, new Response.ErrorListener() { //Create an error listener to handle errors appropriately.\n            @Override\n            public void onErrorResponse(VolleyError error) {\n                Log.d(\"Error.Register\", String.valueOf(error));\n                Snackbar.make(view, getString(R.string.new_error), 5000)\n                        .setAction(\"Action\", null).show();\n            }\n        }) {\n            protected Map<String, String> getParams() {\n                Map<String, String> MyData = new HashMap<String, String>();\n                MyData.put(\"username\", username);\n                MyData.put(\"email\", email);\n                MyData.put(\"password\", password);\n                return MyData;\n            }\n        };\n\n        MyRequestQueue.add(MyStringRequest);\n    }\n\n    private boolean isEmailValid(String email) {\n        String validemail = \"[a-zA-Z0-9\\\\+\\\\.\\\\_\\\\%\\\\-\\\\+]{1,256}\\\\@[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,64}(\\\\.[a-zA-Z0-9][a-zA-Z0-9\\\\-]{0,25})+\";\n        Matcher matcher = Pattern.compile(validemail).matcher(email);\n        return matcher.matches();\n    }\n\n    private boolean isPasswordValid(String password) {\n        String validpassword = \"^([a-zA-Z0-9@*#!?$&.-_]{8,30})$\";\n        Matcher matcher = Pattern.compile(validpassword).matcher(password);\n        return matcher.matches();\n    }\n\n    private boolean isPasswordConfirmed(String password, String passwordConfirm) {\n        if(password.equals(passwordConfirm)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Shows the progress UI and hides the login form.\n     */\n    @TargetApi(Build.VERSION_CODES.HONEYCOMB_MR2)\n    private void showProgress(final boolean show) {\n        // On Honeycomb MR2 we have the ViewPropertyAnimator APIs, which allow\n        // for very easy animations. If available, use these APIs to fade-in\n        // the progress spinner.\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {\n            int shortAnimTime = getResources().getInteger(android.R.integer.config_shortAnimTime);\n\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n            mLoginFormView.animate().setDuration(shortAnimTime).alpha(\n                    show ? 0 : 1).setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n                }\n            });\n\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n            mProgressView.animate().setDuration(shortAnimTime).alpha(\n                    show ? 1 : 0).setListener(new AnimatorListenerAdapter() {\n                @Override\n                public void onAnimationEnd(Animator animation) {\n                    mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n                }\n            });\n        } else {\n            // The ViewPropertyAnimator APIs are not available, so simply show\n            // and hide the relevant UI components.\n            mProgressView.setVisibility(show ? View.VISIBLE : View.GONE);\n            mLoginFormView.setVisibility(show ? View.GONE : View.VISIBLE);\n        }\n    }\n\n\n}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/wordpress/commonplayground/RegistrationActivity.java	(date 1544171144000)
+++ app/src/main/java/com/wordpress/commonplayground/RegistrationActivity.java	(date 1544172485953)
@@ -190,12 +190,20 @@
         StringRequest MyStringRequest = new StringRequest(Request.Method.POST, url, new Response.Listener<String>() {
             @Override
             public void onResponse(String response) {
-                //This code is executed if the server responds, whether or not the response contains data.
-                Log.d("Response.Register", response.toString());
-                Intent openLoginActivity = new Intent(RegistrationActivity.this, LoginActivity.class);
-                startActivity(openLoginActivity);
+                String result = new String();
+                switch (Integer.parseInt(response.toString())){
+                    case -2: result = getString(R.string.username_double_error); break;
+                    case -1: result = getString(R.string.email_double_error); break;
+                    case 0: result = getString(R.string.registration_succsess);
+                }
+                Snackbar.make(view, result, 5000)
+                        .setAction("Action", null).show();
+                if (result.equals(R.string.registration_succsess)) {
+                    Intent openLoginActivity = new Intent(RegistrationActivity.this, LoginActivity.class);
+                    startActivity(openLoginActivity);
+                }
             }
-        }, new Response.ErrorListener() { //Create an error listener to handle errors appropriately.
+        }, new Response.ErrorListener() {
             @Override
             public void onErrorResponse(VolleyError error) {
                 Log.d("Error.Register", String.valueOf(error));
Index: app/src/main/res/values/strings.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><resources>\n    <string name=\"app_name\">CommonPlayground</string>\n    <!-- Strings related to navigation -->\n    <string name=\"navigation_drawer_open\">Open navigation drawer</string>\n    <string name=\"navigation_drawer_close\">Close navigation drawer</string>\n    <string name=\"nav_header_title\">Common Playground</string>\n    <string name=\"nav_header_subtitle\">CommonPlaygroundApp@gmail.com</string>\n    <string name=\"nav_header_desc\">Navigation header</string>\n    <string name=\"menu_dashboard\">Dashboard</string>\n    <string name=\"menu_mySessions\">My Sessions</string>\n    <string name=\"menu_profile\">Profile</string>\n    <string name=\"menu_friendlist\">Friendlist</string>\n    <string name=\"menu_logout\">Logout</string>\n    <string name=\"menu_help\">Help</string>\n    <string name=\"menu_faq\">FAQ</string>\n    <string name=\"menu_contactAdmin\">Contact Admin</string>\n    <string name=\"tooltip_tbi\">Coming soon!</string>\n    <string name=\"action_settings\">Settings</string>\n    <!-- Strings related to AddSession -->\n    <string name=\"new_title\">Title</string>\n    <string name=\"new_game\">Game</string>\n    <string name=\"new_place\">Place</string>\n    <string name=\"new_date\">Date</string>\n    <string name=\"new_time\">Time</string>\n    <string name=\"new_players\">How many Players?</string>\n    <string name=\"new_description\">Description</string>\n    <string name=\"new_button\">Publish</string>\n    <string name=\"new_response_fine\">Your Session is saved!</string>\n    <string name=\"new_error\">Something went wrong! Please try it again later.</string>\n    <!-- Strings related to login and register -->\n    <string name=\"login_error\">Email or password wrong.</string>\n    <string name=\"title_activity_login\">Login</string>\n    <string name=\"prompt_username\">Username</string>\n    <string name=\"prompt_email\">Email</string>\n    <string name=\"prompt_password\">Password</string>\n    <string name=\"prompt_password_confirm\">Password (confirm)</string>\n    <string name=\"action_sign_in\">Sign in</string>\n    <string name=\"action_sign_in_short\">Sign in</string>\n    <string name=\"action_register\">Register</string>\n    <string name=\"error_invalid_email\">This email address is invalid</string>\n    <string name=\"error_short_password\">This password is too short</string>\n    <string name=\"error_long_password\">This password is too long</string>\n    <string name=\"error_invalid_password\">The password can only consist of letters, numbers and those characters: @ * # ! ? . - _</string>\n    <string name=\"error_invalid_password_confirm\">This is not the same password</string>\n    <string name=\"error_incorrect_password\">This password is incorrect</string>\n    <string name=\"error_field_required\">This field is required</string>\n    <string name=\"permission_rationale\">\"Contacts permissions are needed for providing email\n        completions.\"\n    </string>\n    <string name=\"title_activity_registration\">Register</string>\n</resources>\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/res/values/strings.xml	(date 1544171144000)
+++ app/src/main/res/values/strings.xml	(date 1544172290383)
@@ -28,6 +28,9 @@
     <string name="new_response_fine">Your Session is saved!</string>
     <string name="new_error">Something went wrong! Please try it again later.</string>
     <!-- Strings related to login and register -->
+    <string name="username_double_error">This username already exists.</string>
+    <string name="email_double_error">This email is already registered.</string>
+    <string name="registration_succsess">Your account has been registered.</string>
     <string name="login_error">Email or password wrong.</string>
     <string name="title_activity_login">Login</string>
     <string name="prompt_username">Username</string>
