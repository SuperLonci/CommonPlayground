buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.21.0"
    }
}

group = 'commonplayground'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

bootJar {
    baseName = 'commonplayground'
    version = '0.1.0'
}

configurations { codacy }

repositories {
    mavenCentral()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    // Spring Boot
    testCompile('org.springframework.boot:spring-boot-starter-test')
    compile("org.springframework.boot:spring-boot-starter-web")
    
    // Spring Boot Test
    implementation 'org.springframework.boot:spring-boot-starter-test:2.1.4.RELEASE'

    // Database
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("com.h2database:h2")

    // Testing
    // JUnit 5
    testCompile("org.junit.jupiter:junit-jupiter-api:5.4.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.1")
    // JUnit4
    testCompile("junit:junit:4.12")
    testRuntime("org.junit.vintage:junit-vintage-engine:5.4.1")
    // Cucumber
    testCompile 'io.cucumber:cucumber-java:4.2.6'
    implementation 'io.cucumber:cucumber-junit:4.3.1'
    implementation 'io.cucumber:cucumber-spring:4.3.1'

    // rest-assured
    compile 'io.rest-assured:json-path:3.2.0'
    testCompile 'io.rest-assured:spring-mock-mvc:3.2.0'

    // JSONPath
    compile 'io.rest-assured:json-path:3.2.0'

    // JSONSchemeValidator
    testCompile 'io.rest-assured:json-schema-validator:3.2.0'

    // hamcrest
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-core
    compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.1.1.RELEASE'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    // codacy
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'

    // Jacoco Agent
    compile group: 'org.jacoco', name: 'org.jacoco.agent', version: '0.8.3'
}

test {
    useJUnitPlatform()
    testLogging {
        events = ["passed", "failed", "skipped"]
        //showStandardStreams = true
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile
// Task is deprecated
// Cucumber tests are running because of RunCucumberTests class as part of gradle test task (with coverage)
task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        javaexec {
            main = 'cucumber.api.cli.Main'
            //jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/jacoco/cucumber.exec,append=false"]
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', "html:build/reports/cucumber",
                    //'--plugin', "j unit:${project.buildDir}/test-results/cucumber-report.xml",
                    //'--plugin', "json:${project.buildDir}/test-results/cucumber-report.json",
                    '--glue', 'commonplayground.controller.cucumber.api.steps'/*, 'cucumber.api.spring'*/,
                    'src/test/resources/cucumber/api']
        }
    }
}

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

jacoco {
    toolVersion = "0.8.3"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport() {
    dependsOn test//, cucumber

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*', '**/commonplayground/controller/cucumber/api/*']
    def debugTree = fileTree(dir: "$project.buildDir/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/test.exec', 'jacoco/cucumber.exec'
    ])
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/test/jacocoTestReport.xml"
    ]
}