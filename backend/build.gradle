buildscript {
    repositories {
        mavenCentral()
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.0.5.RELEASE")
        classpath "gradle.plugin.com.palantir.gradle.docker:gradle-docker:0.21.0"
    }
}

group = 'commonplayground'

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'jacoco'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'com.palantir.docker'

bootJar {
    baseName = 'commonplayground'
    version = '0.1.0'
}

configurations { codacy }

repositories {
    mavenCentral()
    maven { url "https://repository.jboss.org/nexus/content/repositories/releases" }
    maven { url "https://jitpack.io" }
    maven { url "http://dl.bintray.com/typesafe/maven-releases" }
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

dependencies {
    compile("org.springframework.boot:spring-boot-starter-web")
    testCompile('org.springframework.boot:spring-boot-starter-test')

    // Database
    compile("org.springframework.boot:spring-boot-starter-data-jpa")
    compile("com.h2database:h2")

    // Testing
    // JUnit 5
    testCompile("org.junit.jupiter:junit-jupiter-api:5.4.1")
    testRuntime("org.junit.jupiter:junit-jupiter-engine:5.4.1")
    // JUnit4
    testCompile("junit:junit:4.12")
    testRuntime("org.junit.vintage:junit-vintage-engine:5.4.1")
    // Cucumber
    testCompile 'io.cucumber:cucumber-java:4.2.6'

    // rest-assured
    compile 'io.rest-assured:json-path:3.2.0'
    testCompile 'io.rest-assured:spring-mock-mvc:3.2.0'

    // JSONPath
    compile 'io.rest-assured:json-path:3.2.0'

    // JSONSchemeValidator
    testCompile 'io.rest-assured:json-schema-validator:3.2.0'

    // hamcrest
    testImplementation 'org.hamcrest:hamcrest-library:1.3'

    // https://mvnrepository.com/artifact/org.springframework.security/spring-security-core
    compile group: 'org.springframework.security', name: 'spring-security-core', version: '5.1.1.RELEASE'

    // lombok
    compileOnly 'org.projectlombok:lombok:1.18.6'
    annotationProcessor 'org.projectlombok:lombok:1.18.6'

    // codacy
    codacy 'com.github.codacy:codacy-coverage-reporter:-SNAPSHOT'

    // Jacoco
    //implementation 'org.jacoco:jacoco-maven-plugin:0.8.3'

    implementation 'org.apache.maven.plugins:maven-surefire-plugin:3.0.0-M3'
}

test {
    useJUnitPlatform()
    testLogging {
        events = ["passed", "failed", "skipped"]
        //showStandardStreams = true
    }
}

configurations {
    cucumberRuntime {
        extendsFrom testRuntime
    }
}

/*test << {
    jacoco {
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpDir = file("$buildDir/jacoco/classpathdumps")
        includes = ["src/test/resources/cucumber/*"]
        includeNoLocationClasses = true
    }
    javaexec {
        main = "cucumber.api.cli.Main"
        classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
        args = ['--strict', '--monochrome', '--plugin', 'pretty', '--glue', 'commonplayground.controller.cucumber.api', 'src/test/resources/cucumber']
    }
    useJUnitPlatform()
    testLogging {
        events = ["passed", "failed", "skipped"]
        //showStandardStreams = true
    }
}*/

/*test {
//    exclude '**' // exclude all to leave testing to tasks unitTest & integrationTest
//    dependsOn integrationTest
    useJUnitPlatform()
    testLogging {
        showStandardStreams = true
    }
    include '**'
    jacoco {
        include '**'
    }
}*/

task unpack(type: Copy) {
    dependsOn bootJar
    from(zipTree(tasks.bootJar.outputs.files.singleFile))
    into("build/dependency")
}
docker {
    name "${project.group}/${bootJar.baseName}"
    copySpec.from(tasks.unpack.outputs).into("dependency")
    buildArgs(['DEPENDENCY': "dependency"])
}

task sendCoverageToCodacy(type: JavaExec, dependsOn: jacocoTestReport) {
    main = "com.codacy.CodacyCoverageReporter"
    classpath = configurations.codacy
    args = [
            "report",
            "-l",
            "Java",
            "-r",
            "${buildDir}/reports/jacoco/jacocoXml"
    ]
}

//task integTestReport (type: JacocoReport) {
//
//    executionData project.tasks.cucumber
//
//    sourceDirectories = project.files(project.sourceSets.test.allSource.srcDirs)
//    classDirectories = project.sourceSets.test.output
//
//    def reportDir = project.reporting.file("jacoco/integTest/html")
//    reports {
//        html.destination = reportDir
//    }
//    doLast {
//        println "See report at: file://${reportDir.toURI().path}index.html"
//    }
//}

//task testReport(type: TestReport) {
//    destinationDir = file("$buildDir/reports/tests/UT")
//    testResultDirs = fileTree("$buildDir/test-results/UT")
//    reportOn test
//}
//
//jacoco {
//    toolVersion = "0.8.3"
//    //reportsDir = file("$buildDir/reports/jacoco")
//}


//jacocoTestReport{
//    reports {
//        xml.enabled true
//        csv.enabled false
//        //xml.destination file("${buildDir}/reports/jacoco/jacocoXml")
//    }
//
//    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
//    def debugTree = fileTree(dir: "$project.buildDir/intermediates/javac/debug", excludes: fileFilter)
//    def mainSrc = "$project.projectDir/src/main/java"
//
//    sourceDirectories = files([mainSrc])
//    classDirectories = files([debugTree])
//    executionData = fileTree(dir: project.buildDir, includes: [
//            'jacoco/test.exec', 'outputs/code_coverage/debugAndroidTest/connected/**/*.ec'
//    ])
//}


/*apply plugin: 'jacoco'

configurations {
    jacocoAgent
}

dependencies {
    jacocoAgent 'org.jacoco:org.jacoco.agent:0.7.1.201405082137'
}

task unZipJacocoAgent << {
    def jacocoAgentPath = configurations.jacocoAgent.resolve().first()
    copy {
        from zipTree(jacocoAgentPath)
        into "$buildDir/jacocoagent/unpacked"
    }
    copy {
        from "$buildDir/jacocoagent/unpacked/jacocoagent.jar"
        into "$buildDir/jacocoagent"
    }
    delete "$buildDir/jacocoagent/unpacked"
}

jacocoTestReport.dependsOn test
test.finalizedBy jacocoTestReport

task deploy {
    dependsOn assemble, unZipJacocoAgent
}

deploy << {
    def JAVA_AGENT="-javaagent:$buildDir/jacocoagent/jacocoagent.jar=destfile=$buildDir/jacoco/functionalTest.exec"

    "java $JAVA_AGENT -jar $jar.archivePath".execute()
    Thread.sleep(3000)
}*/

//task undeploy << {
//    def pid = file('application.pid').text
//    "kill $pid".execute().waitFor()
//}

/*configurations {
    functionalTest
}

sourceSets {
    functionalTest {
        java.srcDir file('src/test/resources/cucumber/api')
        resources.srcDir file('src/functionalTest/resources')
        compileClasspath = sourceSets.main.output + sourceSets.test.output + configurations.testRuntime + configurations.functionalTestCompile
        runtimeClasspath = output + compileClasspath + configurations.functionalTestRuntime
    }
}*/

def jacocoAgent = zipTree(configurations.jacocoAgent.singleFile).filter { it.name == "jacocoagent.jar" }.singleFile

task cucumber() {
    dependsOn assemble, compileTestJava
    doLast {
        /*javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'html:build/reports/cucumber', '--glue', 'commonplayground.controller.cucumber.api', 'src/test/resources/cucumber']
        }*/
        javaexec {
            //systemProperties = ['environment': System.properties['environment.type']]
            main = 'cucumber.api.cli.Main'
            //'jvmOptions',"jvmArgs", '-javaagent:$jacocoAgent=destfile=$buildDir/results/jacoco/cucumber.exec,append=false',
            jvmArgs = ["-javaagent:$jacocoAgent=destfile=$buildDir/jacoco/cucumber.exec,append=false"]

            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [//'--plugin', 'com.foreach.cuke.core.formatter.ConsoleReporter',
                    '--plugin', "junit:${project.buildDir}/test-results/cucumber-report.xml",
                    '--plugin', "json:${project.buildDir}/test-results/cucumber-report.json",
                    '--glue', 'commonplayground.controller.cucumber.api',
                    //'-h',
                    'src/test/resources/cucumber']
        }
    }
}

jacocoTestReport() {

    reports {
        xml.enabled = true
        html.enabled = true
    }

    def fileFilter = ['**/R.class', '**/R$*.class', '**/BuildConfig.*', '**/Manifest*.*', '**/*Test*.*', 'android/**/*.*']
    def debugTree = fileTree(dir: "$project.buildDir/classes/", excludes: fileFilter)
    def mainSrc = "$project.projectDir/src/main/java"

    sourceDirectories = files([mainSrc])
    classDirectories = files([debugTree])
    executionData = fileTree(dir: project.buildDir, includes: [
            'jacoco/test.exec', 'jacoco/cucumber.exec'
    ])
}

/*task functionalTest(type: Test) {
    description = 'Runs the functional tests.'
    group = 'verification'
    testClassesDir = sourceSets.functionalTest.output.classesDir
    classpath = sourceSets.functionalTest.runtimeClasspath

    reports.html.destination = "$reportsDir/functionalTest"

    jacoco {
        enabled = true
        append = false
        destinationFile = file("$buildDir/jacoco/functionalTest.exec")
        //classDumpFile = file("$buildDir/jacoco/functionalTestClassDumpFile")
    }

    dependsOn assemble, compileTestJava
    doLast {
        /*javaexec {
            main = "cucumber.api.cli.Main"
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = ['--plugin', 'html:build/reports/cucumber', '--glue', 'commonplayground.controller.cucumber.api', 'src/test/resources/cucumber']
        }
        javaexec {
            //systemProperties = ['environment': System.properties['environment.type']]
            main = 'cucumber.api.cli.Main'
            classpath = configurations.cucumberRuntime + sourceSets.main.output + sourceSets.test.output
            args = [//'--plugin', 'com.foreach.cuke.core.formatter.ConsoleReporter',
                    '--plugin', "junit:${project.buildDir}/test-results/cucumber-report.xml",
                    '--plugin', "json:${project.buildDir}/test-results/cucumber-report.json",
                    '--glue', 'commonplayground.controller.cucumber.api',
                    '--tags', '~@ignore',
                    'src/test/resources/cucumber']
        }
    }

    dependsOn deploy
    //finalizedBy undeploy
    shouldRunAfter test
}
check.dependsOn functionalTest

task jacocoFunctionalTestReport(type:JacocoReport) {
    executionData functionalTest
    sourceSets sourceSets.main

    dependsOn functionalTest
    //mustRunAfter undeploy
}
functionalTest.finalizedBy jacocoFunctionalTestReport

task jacocoMerge(type: JacocoMerge) {
    executionData test, functionalTest
    destinationFile = file("$buildDir/jacoco/merged.exec")

    dependsOn jacocoTestReport, jacocoFunctionalTestReport
}

task mergedReport(type: JacocoReport) {
    executionData jacocoMerge.destinationFile
    sourceDirectories = files(sourceSets.main.java.srcDirs)
    classDirectories = files(sourceSets.main.output.classesDir)

    dependsOn jacocoMerge
}
check.dependsOn mergedReport

*/